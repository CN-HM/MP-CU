//tools.wxs文件

indexOf = function (arr, value) {
    if (arr.indexOf(value) < 0) {
        return false;
    } else {
        return true;
    }
}

// 数字格式化
numberFormat = function (Num) {
    if (Num > 1000 && Num < 10000) {
        return Math.floor(Num / 1000) + 'k';
    } else if (Num > 10000) {
        return Math.floor(Num / 10000) + 'W';
    } else {
        return Num;
    }
}

/**
 * 金额处理:保留几位小数，不四舍五入(关于金额数值的处理用这个方法,以防金额计算出错)
 * @param num   金额
 * @param decimal   保留位数
 * @returns {string}
 */
moneyFormat = function (num, decimal) {
    if (num) {
        num = num.toString();
        let index = num.indexOf('.')
        if (index !== -1) {
            num = num.substring(0, decimal + index + 1)
        } else {
            num = num.substring(0)
        }
        return parseFloat(num).toFixed(decimal)
    } else {
        return 0;
    }
}

//将一个浮点数转成整数，返回整数和倍数。如 3.14 >> 314，倍数是 100
toInteger = function (floatNum) {
    let ret = {times: 1, num: 0};
    //判断obj是否为一个整数
    if (Math.floor(floatNum) === floatNum) {
        ret.num = floatNum;
        return ret
    }
    let strfi = floatNum + '';
    let dotPos = strfi.indexOf('.');
    let len = strfi.substr(dotPos + 1).length;
    let times = Math.pow(10, len);
    let intNum = parseInt(floatNum * times + 0.5, 10);
    ret.times = times;
    ret.num = intNum;
    return ret
}

/*
 * 核心方法，实现加减乘除运算，确保不丢失精度
 * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）
 * @param a {number} 运算数1
 * @param b {number} 运算数2
 * @param op {string} 运算类型，有加减乘除
 * @param decimal {number} 保留位数
 */
operation = function (a, b, op, decimal) {
    let o1 = toInteger(a), o2 = toInteger(b);
    let n1 = o1.num, n2 = o2.num, t1 = o1.times, t2 = o2.times;
    let max = t1 > t2 ? t1 : t2, result = null, res = 0;
    switch (op) {
        case '+':
            if (t1 === t2) { // 两个小数位数相同
                result = n1 + n2
            } else if (t1 > t2) { // o1 小数位 大于 o2
                result = n1 + n2 * (t1 / t2)
            } else { // o1 小数位 小于 o2
                result = n1 * (t2 / t1) + n2
            }
            res = result / max;
        case '-':
            if (t1 === t2) {
                result = n1 - n2
            } else if (t1 > t2) {
                result = n1 - n2 * (t1 / t2)
            } else {
                result = n1 * (t2 / t1) - n2
            }
            res = result / max;
        case '*':
            result = (n1 * n2) / (t1 * t2);
            res = result;
        case '/':
            result = (n1 / n2) * (t2 / t1);
            res = result
    }
    //返回数据
    if (decimal) {
        return moneyFormat(res, decimal);
    } else {
        return res;
    }
}

module.exports = {
    numberFormat: numberFormat,
    indexOf: indexOf,
    moneyFormat: moneyFormat,
    operation: operation
}